--- java/org/apache/jasper/compiler/JDTCompiler.java.orig	2018-07-02 13:12:33.000000000 -0400
+++ java/org/apache/jasper/compiler/JDTCompiler.java	2018-07-31 16:48:35.420679218 -0400
@@ -95,7 +95,6 @@ public class JDTCompiler extends org.apa
     /**
      * Compile the servlet from .java file to .class file
      */
-    @Override
     protected void generateClass(String[] smap)
         throws FileNotFoundException, JasperException, Exception {
 
@@ -126,12 +125,10 @@ public class JDTCompiler extends org.apa
                 this.sourceFile = sourceFile;
             }
 
-            @Override
             public char[] getFileName() {
                 return sourceFile.toCharArray();
             }
 
-            @Override
             public char[] getContents() {
                 char[] result = null;
                 FileInputStream is = null;
@@ -173,7 +170,6 @@ public class JDTCompiler extends org.apa
                 return result;
             }
 
-            @Override
             public char[] getMainTypeName() {
                 int dot = className.lastIndexOf('.');
                 if (dot > 0) {
@@ -182,7 +178,6 @@ public class JDTCompiler extends org.apa
                 return className.toCharArray();
             }
 
-            @Override
             public char[][] getPackageName() {
                 StringTokenizer izer =
                     new StringTokenizer(className, ".");
@@ -194,7 +189,6 @@ public class JDTCompiler extends org.apa
                 return result;
             }
 
-            @Override
             public boolean ignoreOptionalProblems() {
                 return false;
             }
@@ -202,7 +196,6 @@ public class JDTCompiler extends org.apa
 
         final INameEnvironment env = new INameEnvironment() {
 
-                @Override
                 public NameEnvironmentAnswer
                     findType(char[][] compoundTypeName) {
                     StringBuilder result = new StringBuilder();
@@ -215,7 +208,6 @@ public class JDTCompiler extends org.apa
                     return findType(result.toString());
                 }
 
-                @Override
                 public NameEnvironmentAnswer
                     findType(char[] typeName,
                              char[][] packageName) {
@@ -297,7 +289,6 @@ public class JDTCompiler extends org.apa
                     }
                 }
 
-                @Override
                 public boolean isPackage(char[][] parentPackageName,
                                          char[] packageName) {
                     StringBuilder result = new StringBuilder();
@@ -319,7 +310,6 @@ public class JDTCompiler extends org.apa
                     return isPackage(result.toString());
                 }
 
-                @Override
                 public void cleanup() {
                 }
 
@@ -368,17 +358,6 @@ public class JDTCompiler extends org.apa
             } else if(opt.equals("1.7")) {
                 settings.put(CompilerOptions.OPTION_Source,
                              CompilerOptions.VERSION_1_7);
-            } else if(opt.equals("1.8")) {
-                settings.put(CompilerOptions.OPTION_Source,
-                             CompilerOptions.VERSION_1_8);
-            // Support old format that was used in EA implementation as well
-            } else if(opt.equals("9") || opt.equals("1.9")) {
-                settings.put(CompilerOptions.OPTION_Source,
-                             JDT_JAVA_9_VERSION);
-            } else if(opt.equals("10")) {
-                // Constant not available in latest ECJ version that runs on
-                // Java 7
-                settings.put(CompilerOptions.OPTION_Source, "10");
             } else {
                 log.warn("Unknown source VM " + opt + " ignored.");
                 settings.put(CompilerOptions.OPTION_Source,
@@ -452,7 +431,6 @@ public class JDTCompiler extends org.apa
             new DefaultProblemFactory(Locale.getDefault());
 
         final ICompilerRequestor requestor = new ICompilerRequestor() {
-                @Override
                 public void acceptResult(CompilationResult result) {
                     try {
                         if (result.hasProblems()) {
